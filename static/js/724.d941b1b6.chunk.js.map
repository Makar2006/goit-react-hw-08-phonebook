{"version":3,"file":"static/js/724.d941b1b6.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","components/pages/RegisterPage.jsx","redux/authSelectors.js","redux/tooglePassword.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"RegisterForm_contactForm__SL4S4\",\"formSpan\":\"RegisterForm_formSpan__xEKkU\",\"formButton\":\"RegisterForm_formButton__WEjAB\",\"contactInput\":\"RegisterForm_contactInput__38rcX\"};","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Navigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { signUp } from '../../redux/auth';\nimport { toggleClick } from '../../redux/tooglePassword';\nimport { selectIsLoggedIn } from '../../redux/authSelectors';\nimport css from './RegisterForm.module.css';\n\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nconst schema = yup\n  .object({\n    name: yup.string().min(4).max(20).required(),\n    email: yup.string().min(5).max(20).required(),\n    password: yup.string().min(6).max(15).required(),\n  })\n  .required();\n\nconst RegisterForm = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n  const isLogedIn = useSelector(selectIsLoggedIn);\n  const [toggleInput, setToggleInput] = useState('password');\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    dispatch(signUp(data))\n      .unwrap()\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <div>\n      {isLogedIn && <Navigate to=\"/contacts\" replace />}\n      <form className={css.contactForm} onSubmit={handleSubmit(onSubmit)}>\n        <label>\n          <span>Name</span>\n          <input\n            className={css.contactInput}\n            type=\"text\"\n            placeholder=\"User Name\"\n            {...register('name', { required: true })}\n          />\n          <span>{errors.name?.message}</span>\n        </label>\n        <label>\n          <span>Email</span>\n          <input\n            className={css.contactInput}\n            type=\"email\"\n            placeholder=\"user@gmail.com\"\n            {...register('email', { required: true })}\n          />\n          <span>{errors.email?.message}</span>\n        </label>\n        <label>\n          <span>Password</span>\n          <input\n            className={css.contactInput}\n            type={toggleInput}\n            placeholder=\"********\"\n            {...register('password', { required: true })}\n          />\n          <span onClick={() => toggleClick(toggleInput, setToggleInput)}></span>\n          <span>{errors.password?.message}</span>\n        </label>\n        <button className={css.formButton} type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n","import React from 'react';\nimport RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n","export const selectUser = state => state.auth.user;\nexport const selectError = state => state.auth.error;\nexport const selectLoading = state => state.auth.isLoading;\nexport const selectIsLoggedIn = state => state.auth.isLoggedIn;\nexport const selectIsRefreshing = state => state.auth.isRefreshing;\n","export const toggleClick = (toggle, setInput, setIcon) => {\n  if (toggle === 'password') {\n    setIcon(true);\n    return setInput('text');\n  }\n  if (toggle === 'text') {\n    setIcon(false);\n    return setInput('password');\n  }\n};\n"],"names":["schema","yup","name","min","max","required","email","password","_errors$name","_errors$email","_errors$password","_useForm","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","isLogedIn","useSelector","selectIsLoggedIn","_useState","useState","_useState2","_slicedToArray","toggleInput","setToggleInput","dispatch","useDispatch","_jsxs","children","_jsx","Navigate","to","replace","className","css","onSubmit","data","signUp","unwrap","catch","err","console","log","_objectSpread","type","placeholder","message","onClick","toggleClick","RegisterForm","selectUser","state","auth","user","selectLoading","isLoading","isLoggedIn","toggle","setInput","setIcon"],"sourceRoot":""}